#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <time.h>
#include <string.h>

#define PIPES_CNT 3
#define BUFFER_SIZE 50

// Generování náhodných čísel
void generate_numbers(int write_pipe, int N) {
    int num;
    char buffer[BUFFER_SIZE];
    printf("PID %d: Začátek generování čísel.\n", getpid());
    srand(time(NULL));
    for (int i = 0; N == -1 || i < N; i++) {
        num = rand() % 101;  // <0 - 100>
        snprintf(buffer, BUFFER_SIZE, "%d. %d\n", i + 1, num);
        write(write_pipe, buffer, strlen(buffer));  // Pošlese čísla do roury
        usleep(100000);  // Pauza 100 ms
    }
    close(write_pipe);
    printf("PID %d: Generování čísel ukončeno.\n", getpid());
}

// Čtení čísel z roury a přidání operace
void add_operation(int read_pipe, int write_pipe) {
    int num, cnt = 0;
    char buffer[BUFFER_SIZE], sign = '+';
    printf("PID %d: Začátek přidávání operace.\n", getpid());
    while (read(read_pipe, buffer, BUFFER_SIZE) > 0) {
        if(cnt % 2 == 0) {
            sign = '+';
        } else {
            sign = '-';
        }
        printf("PID %d: Číslo: %s\n", getpid(), buffer);
        sscanf(buffer, "%*d. %d", &num);
        snprintf(buffer + strlen(buffer), BUFFER_SIZE - strlen(buffer), "%c%d\n", sign, rand() % 101);
        write(write_pipe, buffer, strlen(buffer));
    }
    close(read_pipe);
    close(write_pipe);
    printf("PID %d: Přidávání operace ukončeno.\n", getpid());
}

// Přidání součtu
void add_sum(int read_pipe, int write_pipe) {
    int num[2], result;
    char buffer[BUFFER_SIZE], operation;
    printf("PID %d: Začátek přidávání součtu.\n", getpid());
    while (read(read_pipe, buffer, strlen(buffer)) > 0) {
        sscanf(buffer, "%*d. %d%c%d", &num[0], &operation, &num[1]);
        result = (operation == '+') ? (num[0] + num[1]) : (num[0] - num[1]);
        snprintf(buffer + strlen(buffer), BUFFER_SIZE - strlen(buffer), "=%d\n", result);
        write(write_pipe, buffer, strlen(buffer));
    }
    close(read_pipe);
    close(write_pipe);
    printf("PID %d: Přidávání součtů ukončeno.\n", getpid());
}

// Zobrazení výsledků
void display_results(int read_pipe) {
    char buffer[BUFFER_SIZE];
    printf("PID %d: Zobrazení výsledků.\n", getpid());
    while (read(read_pipe, buffer, BUFFER_SIZE) > 0) {
        printf("PID %d: Výsledek: %s", getpid(), buffer);
    }
    close(read_pipe);
    printf("PID %d: Zobrazení výsledků ukončeno.\n", getpid());
}

int main(int argc, char *argv[]) {
    int N = -1;  
    if (argc == 2) {
        N = atoi(argv[1]);  
    }

    int pipes[PIPES_CNT][2];
    for(int i = 0; i < PIPES_CNT; i++) {
        if (pipe(pipes[i]) == -1) {
            perror("pipe");
            exit(1);
        }
    }

    // Vytvoření prvního potomka 
    if (fork() == 0) {  // Otevření roury [0][1]
        close(pipes[0][0]);
        close(pipes[1][0]);
        close(pipes[1][1]);
        close(pipes[2][0]);
        close(pipes[2][1]);

        generate_numbers(pipes[0][1], N);
        return 0;
    }

    // Vytvoření druhého potomka 
    if (fork() == 0) {  // Otevření roury [0][0] a [1][1]
        close(pipes[0][1]);
        close(pipes[1][0]);
        close(pipes[2][0]);
        close(pipes[2][1]);
        add_operation(pipes[0][0], pipes[1][1]); 
        return 0; 
    }

    if(fork() == 0) {   // Otevření roury [1][0] a [2][1]
        close(pipes[0][0]);
        close(pipes[0][1]);
        close(pipes[1][1]);
        close(pipes[2][0]);
        add_sum(pipes[1][0],pipes[2][1]);
        return 0;
    }

    // Rodič: Zavřou se oba konce roury a čeká se na oba potomky
    for(int i = 1; i < PIPES_CNT; i++) {    // Zavření rour kromě [2][0]
        for(int j = 0; j < 2; j++) {
            if(i == 2 && j == 0) {
                continue;
            }
            close(pipes[j][j]);
        }
    }
    display_results(pipes[2][0]);
    wait(NULL);  // Čekání na jednoho potomka
    wait(NULL);  // Druhého potomka
    wait(NULL);  // Třetího potomka

    printf("Rodič: Potomci jsou hotovi.\n");
    return 0;
}
